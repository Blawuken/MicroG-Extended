def sublude(name) {
  def projectName = ':' + name.substring(1).replace(':', '-')
  include projectName
  project(projectName).projectDir = file(name.substring(1).replace(':', '/'))
}

def localProperties = new Properties()
try {
  var stream = new File(rootDir, 'local.properties').newDataInputStream()
  localProperties.load(stream)
  stream.close()
} catch (ignored) {
  // Ignore
}
def hasModule = (String name, boolean enabledByDefault) -> {
  return localProperties.getProperty("modules." + name, enabledByDefault.toString()).toBoolean()
}

include ':safe-parcel-processor'

include ':play-services-auth'
include ':play-services-auth-base'
include ':play-services-base'
include ':play-services-basement'
include ':play-services-cast'
include ':play-services-cast-framework'
include ':play-services-gcm'
include ':play-services-gmscompliance'
include ':play-services-iid'
include ':play-services-tasks'

include ':play-services-api'
include ':play-services'

// core only

include ':play-services-core-proto'

sublude ':play-services-basement:ktx'
sublude ':play-services-tasks:ktx'

sublude ':play-services-base:core'
sublude ':play-services-cast:core'
sublude ':play-services-cast-framework:core'
include ':play-services-conscrypt-provider-core'
sublude ':play-services-gmscompliance:core'

include ':play-services-core:microg-ui-tools' // Legacy
include ':play-services-core'
